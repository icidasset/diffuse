module Themes.Sunrise.Playlists.View exposing (view)

import Chunky exposing (..)
import Color exposing (Color)
import Common
import Html exposing (Html, text)
import Html.Attributes exposing (href, placeholder, style, value)
import Html.Events exposing (onInput, onSubmit)
import List.Extra as List
import Material.Icons.Round as Icons
import Material.Icons.Types exposing (Coloring(..))
import Playlists exposing (..)
import Themes.Sunrise.Kit as Kit exposing (ButtonType(..))
import Themes.Sunrise.List
import Themes.Sunrise.Navigation as Navigation
import UI.Navigation exposing (..)
import UI.Page as Page
import UI.Playlists.Page exposing (..)
import UI.Types exposing (..)
import Url



-- ðŸ—º


view : Page -> List Playlist -> Maybe Playlist -> Maybe { oldName : String, newName : String } -> Maybe Color -> Bool -> Html Msg
view page playlists selectedPlaylist editContext bgColor authMethodSupportsPublicData =
    Kit.receptacle
        { scrolling = True }
        (case page of
            Edit encodedName ->
                let
                    filtered =
                        List.filter
                            (.autoGenerated >> (==) False)
                            playlists
                in
                encodedName
                    |> Url.percentDecode
                    |> Maybe.andThen (\n -> List.find (.name >> (==) n) filtered)
                    |> Maybe.map (edit editContext)
                    |> Maybe.withDefault [ nothing ]

            Index ->
                index playlists selectedPlaylist bgColor authMethodSupportsPublicData

            New ->
                new
        )



-- INDEX


index : List Playlist -> Maybe Playlist -> Maybe Color -> Bool -> List (Html Msg)
index playlists selectedPlaylist bgColor authMethodSupportsPublicData =
    let
        isSelected playlist =
            Maybe.map (\s -> ( s.autoGenerated, s.name )) selectedPlaylist == Just ( playlist.autoGenerated, playlist.name )

        customPlaylists =
            playlists
                |> List.filterNot .autoGenerated
                |> List.sortBy lowercaseName

        customPlaylistListItem playlist =
            if isSelected playlist then
                selectedPlaylistListItem playlist bgColor

            else
                { label = text playlist.name
                , actions =
                    List.append
                        (if authMethodSupportsPublicData then
                            [ { icon =
                                    if playlist.public then
                                        Icons.public

                                    else
                                        Icons.public_off
                              , msg =
                                    Just (\_ -> TogglePlaylistVisibility playlist)
                              , title =
                                    if playlist.public then
                                        "Make private"

                                    else
                                        "Make public"
                              }
                            ]

                         else
                            []
                        )
                        [ { icon = Icons.more_vert
                          , msg = Just (ShowPlaylistListMenu playlist)
                          , title = "Menu"
                          }
                        ]
                , msg = Just (ActivatePlaylist playlist)
                , isSelected = False
                }

        directoryPlaylists =
            playlists
                |> List.filter .autoGenerated
                |> List.sortBy lowercaseName

        directoryPlaylistListItem playlist =
            if isSelected playlist then
                selectedPlaylistListItem playlist bgColor

            else
                { label = text playlist.name
                , actions =
                    [ { icon = Icons.more_vert
                      , msg = Just (ShowPlaylistListMenu playlist)
                      , title = "Menu"
                      }
                    ]
                , msg = Just (ActivatePlaylist playlist)
                , isSelected = False
                }
    in
    [ -----------------------------------------
      -- Navigation
      -----------------------------------------
      Navigation.local
        [ ( Icon Icons.arrow_back
          , Label Common.backToIndex Hidden
          , NavigateToPage Page.Index
          )
        , ( Icon Icons.add
          , Label "Create a new playlist" Shown
          , NavigateToPage (Page.Playlists New)
          )
        ]

    -----------------------------------------
    -- Content
    -----------------------------------------
    , if List.isEmpty playlists then
        chunk
            [ "relative" ]
            [ chunk
                [ "absolute", "left-0", "top-0" ]
                [ Kit.canister [ Kit.h1 "Playlists" ] ]
            ]

      else
        Kit.canister
            [ Kit.h1 "Playlists"

            -- Intro
            --------
            , intro

            -- Custom Playlists
            -------------------
            , if List.isEmpty customPlaylists then
                nothing

              else
                raw
                    [ category "Your Playlists"
                    , Themes.Sunrise.List.view
                        Themes.Sunrise.List.Normal
                        (List.map customPlaylistListItem customPlaylists)
                    ]

            -- Directory Playlists
            ----------------------
            , if List.isEmpty directoryPlaylists then
                nothing

              else
                raw
                    [ category "Autogenerated Directory Playlists"
                    , Themes.Sunrise.List.view
                        Themes.Sunrise.List.Normal
                        (List.map directoryPlaylistListItem directoryPlaylists)
                    ]
            ]

    --
    , if List.isEmpty playlists then
        Kit.centeredContent
            [ slab
                Html.a
                [ href (Page.toString <| Page.Playlists New) ]
                [ "block"
                , "opacity-30"
                , "text-inherit"
                ]
                [ Icons.waves 64 Inherit ]
            , slab
                Html.a
                [ href (Page.toString <| Page.Playlists New) ]
                [ "block"
                , "leading-normal"
                , "mt-2"
                , "opacity-40"
                , "text-center"
                , "text-inherit"
                ]
                [ text "No playlists found, create one"
                , lineBreak
                , text "or enable directory playlists."
                ]
            ]

      else
        nothing
    ]


intro : Html Msg
intro =
    [ text "Playlists are not tied to the sources of its tracks, "
    , text "same goes for favourites."
    , lineBreak
    , text "There's also directory playlists, which are playlists derived from root directories."
    ]
        |> raw
        |> Kit.intro


category : String -> Html Msg
category cat =
    chunk
        [ "antialiased"
        , "font-display"
        , "mb-3"
        , "mt-10"
        , "text-base05"
        , "text-xxs"
        , "truncate"
        , "uppercase"

        -- Dark mode
        ------------
        , "dark:text-base04"
        ]
        [ Kit.inlineIcon Icons.folder
        , inline [ "font-bold", "ml-2" ] [ text cat ]
        ]


selectedPlaylistListItem : Playlist -> Maybe Color -> Themes.Sunrise.List.Item Msg
selectedPlaylistListItem playlist bgColor =
    let
        selectionColor =
            Maybe.withDefault Kit.colors.selection bgColor
    in
    { label =
        brick
            [ selectionColor
                |> Color.toCssString
                |> style "color"
            ]
            []
            [ text playlist.name ]
    , actions =
        [ { icon = \size _ -> Icons.check size (Color selectionColor)
          , msg = Just (always DeactivatePlaylist)
          , title = "Selected playlist"
          }
        , { icon = Icons.more_vert
          , msg = Just (ShowPlaylistListMenu playlist)
          , title = "Menu"
          }
        ]
    , msg = Just DeactivatePlaylist
    , isSelected = False
    }



-- NEW


new : List (Html Msg)
new =
    [ -----------------------------------------
      -- Navigation
      -----------------------------------------
      Navigation.local
        [ ( Icon Icons.arrow_back
          , Label "Back to list" Hidden
          , NavigateToPage (Page.Playlists Index)
          )
        ]

    -----------------------------------------
    -- Content
    -----------------------------------------
    , [ Kit.h2 "Name your playlist"

      --
      , [ onInput SetPlaylistCreationContext
        , placeholder "The Classics"
        ]
            |> Kit.textField
            |> chunky [ "max-w-md", "mx-auto" ]

      -- Button
      ---------
      , chunk
            [ "mt-10" ]
            [ Kit.button
                Normal
                Bypass
                (text "Create playlist")
            ]
      ]
        |> Kit.canisterForm
        |> List.singleton
        |> Kit.centeredContent
        |> List.singleton
        |> slab
            Html.form
            [ onSubmit CreatePlaylist ]
            [ "flex"
            , "flex-grow"
            , "text-center"
            ]
    ]



-- EDIT


edit : Maybe { oldName : String, newName : String } -> Playlist -> List (Html Msg)
edit editContext playlist =
    [ -----------------------------------------
      -- Navigation
      -----------------------------------------
      Navigation.local
        [ ( Icon Icons.arrow_back
          , Label "Back to list" Hidden
          , NavigateToPage (Page.Playlists Index)
          )
        ]

    -----------------------------------------
    -- Content
    -----------------------------------------
    , [ Kit.h2 "Name your playlist"

      --
      , [ onInput (SetPlaylistModificationContext playlist.name)
        , placeholder "The Classics"

        --
        , case editContext of
            Just { oldName, newName } ->
                if playlist.name == oldName then
                    value newName

                else
                    value playlist.name

            Nothing ->
                value playlist.name
        ]
            |> Kit.textField
            |> chunky [ "max-w-md", "mx-auto" ]

      -- Button
      ---------
      , chunk
            [ "mt-10" ]
            [ Kit.button
                Normal
                Bypass
                (text "Save")
            ]
      ]
        |> Kit.canisterForm
        |> List.singleton
        |> Kit.centeredContent
        |> List.singleton
        |> slab
            Html.form
            [ onSubmit ModifyPlaylist ]
            [ "flex"
            , "flex-grow"
            , "text-center"
            ]
    ]



-- ðŸ› 


lowercaseName : Playlist -> String
lowercaseName =
    .name >> String.toLower
