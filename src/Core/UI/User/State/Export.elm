module UI.User.State.Export exposing (..)

import Alien
import File.Download
import Json.Encode
import List.Extra as List
import Playlists.Encoding as Playlists
import Return exposing (return)
import Settings exposing (Settings)
import Sources.Encoding as Sources
import Tracks.Encoding as Tracks
import UI.Ports as Ports
import UI.Types exposing (..)
import User.Layer exposing (..)



-- ðŸ”±


export model =
    { favourites = model.favourites
    , playlists = List.filterNot .autoGenerated model.playlists
    , progress = model.progress
    , settings = Just (gatherSettings model)
    , sources = model.sources
    , tracks = model.tracks.untouched

    --
    , modifiedAt = Just model.currentTime
    }
        |> encodeHypaethralData
        |> Json.Encode.encode 2
        |> (if model.isTauri then
                \json -> Ports.downloadJsonUsingTauri { filename = "diffuse.json", json = json }

            else
                File.Download.string "diffuse.json" "application/json"
           )
        |> return model


gatherSettings : Model -> Settings
gatherSettings { chosenBackdrop, coverSelectionReducesPool, hideDuplicates, lastFm, processAutomatically, rememberProgress } =
    { backgroundImage = chosenBackdrop
    , coverSelectionReducesPool = coverSelectionReducesPool
    , hideDuplicates = hideDuplicates
    , lastFm = lastFm.sessionKey
    , processAutomatically = processAutomatically
    , rememberProgress = rememberProgress
    }


saveEnclosedUserData : Manager
saveEnclosedUserData model =
    { cachedTracks = model.cachedTracks
    , equalizerSettings = model.eqSettings
    , grouping = model.grouping
    , onlyShowCachedTracks = model.cachedTracksOnly
    , onlyShowFavourites = model.favouritesOnly
    , repeat = model.repeat
    , scene = model.scene
    , searchTerm = model.searchTerm
    , selectedPlaylist = Maybe.map .name model.selectedPlaylist
    , shuffle = model.shuffle
    , sortBy = model.sortBy
    , sortDirection = model.sortDirection
    , theme = model.theme
    }
        |> encodeEnclosedData
        |> Alien.broadcast Alien.SaveEnclosedUserData
        |> Ports.toBrain
        |> Return.return model


saveFavourites : Manager
saveFavourites model =
    model.favourites
        |> Json.Encode.list Tracks.encodeFavourite
        |> Alien.broadcast Alien.SaveFavourites
        |> Ports.toBrain
        |> return model


saveModifiedAt : Manager
saveModifiedAt =
    -- Handled by ðŸ§ 
    Return.singleton


savePlaylists : Manager
savePlaylists model =
    model.playlists
        |> List.filterNot .autoGenerated
        |> Json.Encode.list Playlists.encode
        |> Alien.broadcast Alien.SavePlaylists
        |> Ports.toBrain
        |> return model


saveProgress : Manager
saveProgress model =
    model.progress
        |> Json.Encode.dict identity Json.Encode.float
        |> Alien.broadcast Alien.SaveProgress
        |> Ports.toBrain
        |> return model


saveSettings : Manager
saveSettings model =
    model
        |> gatherSettings
        |> Settings.encode
        |> Alien.broadcast Alien.SaveSettings
        |> Ports.toBrain
        |> return model


saveSources : Manager
saveSources model =
    model.sources
        |> Json.Encode.list Sources.encode
        |> Alien.broadcast Alien.SaveSources
        |> Ports.toBrain
        |> Return.return model


saveTracks : Manager
saveTracks model =
    model.tracks.untouched
        |> Json.Encode.list Tracks.encodeTrack
        |> Alien.broadcast Alien.SaveTracks
        |> Ports.toBrain
        |> return model
