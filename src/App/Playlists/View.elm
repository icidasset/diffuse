module Playlists.View exposing (..)

import Color
import Color.Convert
import ContextMenu.Types exposing (Msg(ShowPlaylistMenu))
import Html
import Http
import Json.Decode as Decode
import List.Extra as List
import Material.Icons.Action as Icons
import Material.Icons.Content as Icons
import Material.Icons.File as Icons
import Material.Icons.Navigation as Icons
import Material.Icons.Social as Icons
import Mouse
import Navigation.Types exposing (..)
import Navigation.View as Navigation
import Notifications.Types exposing (..)
import Playlists.Types as Playlists exposing (..)
import Routing.Types
import Tracks.Types
import Types as TopLevel exposing (Msg(..))


-- Elements

import Element exposing (..)
import Element.Attributes exposing (..)
import Element.Events exposing (onClick, onInput, onWithOptions)
import Element.Ext exposing (..)
import Element.Input as Input
import Element.Types exposing (Node)
import Layouts exposing (btn, inputBottomPadding, inputTopPadding, logoBackdrop, takeOver)
import Variables exposing (colorDerivatives, colors, scaled)
import Variations exposing (Variations(..))


-- Styles

import Form.Styles exposing (Styles(Input))
import List.Styles exposing (Styles(..))
import Styles exposing (Styles(..))


-- 🍯


entry : Playlists.Page -> TopLevel.Model -> Node
entry page model =
    case page of
        Edit encodedPlaylistName ->
            let
                decodedPlaylistName =
                    Http.decodeUri encodedPlaylistName

                maybePlaylist =
                    Maybe.andThen
                        (\name ->
                            List.find
                                (.name >> (==) name)
                                model.playlists.collection
                        )
                        decodedPlaylistName
            in
                case maybePlaylist of
                    Just playlist ->
                        lazySpread
                            pageEdit
                            playlist

                    Nothing ->
                        empty

        Index ->
            lazy2
                pageIndex
                model.playlists.collection
                model.tracks.selectedPlaylist

        New ->
            lazySpread
                pageNew
                model.playlists.newPlaylist



-- {Page} Index


pageIndex : List Playlist -> Maybe Playlist -> Node
pageIndex playlists maybeSelectedPlaylist =
    column
        Zed
        []
        [ ------------------------------------
          -- Navigation
          ------------------------------------
          Navigation.insideCustom
            [ ( Icon Icons.arrow_back
              , Label (Hidden "Go back")
                --
              , Routing.Types.Index
                    |> Routing.Types.GoToPage
                    |> RoutingMsg
              )
            , ( Icon Icons.add
              , Label (Shown "Create a playlist")
                --
              , Playlists.New
                    |> Routing.Types.Playlists
                    |> Routing.Types.GoToPage
                    |> RoutingMsg
              )
            ]

        ------------------------------------
        -- List
        ------------------------------------
        , column
            Zed
            [ paddingXY (scaled 4) 0 ]
            [ Layouts.h1 "Playlists"
            , Layouts.intro
                [ text "Playlists are not tied to the sources of its tracks."
                , html (Html.br [] [])
                , text "Same goes for favourites."
                ]

            -- Lists
            --
            , let
                ( autoGeneratedPlaylists, yourPlaylists ) =
                    playlists
                        |> List.sortBy (.name >> String.toLower)
                        |> List.partition .autoGenerated

                render =
                    renderPlaylist maybeSelectedPlaylist
              in
                column
                    Zed
                    []
                    [ -- Yours
                      --
                      listTitle
                        { isFirst = True }
                        [ 13
                            |> Icons.person colors.base06
                            |> html
                            |> el WithoutLineHeight []

                        --
                        , text "Your playlists"
                        ]
                    , yourPlaylists
                        |> List.map render
                        |> list

                    -- Computed
                    --
                    , listTitle
                        { isFirst = False }
                        [ 13
                            |> Icons.folder colors.base06
                            |> html
                            |> el WithoutLineHeight [ moveUp 1 ]

                        --
                        , text "Autogenerated directory playlists"
                        ]
                    , autoGeneratedPlaylists
                        |> List.map render
                        |> list
                    ]
            ]
        ]


list : List Node -> Node
list =
    column
        (List Container)
        []


listTitle : { isFirst : Bool } -> List Node -> Node
listTitle { isFirst } =
    row
        H4
        [ paddingBottom (scaled -6)
        , paddingTop
            (if isFirst then
                0
             else
                scaled 6
            )
        , spacingXY (scaled -5) 0
        , verticalCenter
        ]


renderPlaylist : Maybe Playlist -> Playlist -> Node
renderPlaylist maybeSelectedPlaylist playlist =
    let
        isSelected =
            Just playlist == maybeSelectedPlaylist
    in
        Layouts.listItem
            [ vary Clickable True
            , verticalCenter

            --
            , playlist
                |> Tracks.Types.TogglePlaylist
                |> TopLevel.TracksMsg
                |> onClick
            ]
            [ ------------------------------------
              -- Label
              ------------------------------------
              el
                (if isSelected then
                    Selected
                 else
                    Zed
                )
                [ width fill ]
                (text playlist.name)

            ------------------------------------
            -- Action
            ------------------------------------
            , if isSelected then
                html (Icons.check colors.base08 16)
              else if playlist.autoGenerated then
                empty
              else
                el
                    WithoutLineHeight
                    [ Mouse.position
                        |> Decode.map (ShowPlaylistMenu playlist.name)
                        |> Decode.map (TopLevel.ContextMenuMsg)
                        |> onWithOptions
                            "click"
                            { stopPropagation = True
                            , preventDefault = True
                            }
                    ]
                    (16
                        |> Icons.settings colorDerivatives.text
                        |> html
                    )
            ]


removeEventOptions : Element.Events.Options
removeEventOptions =
    { stopPropagation = True
    , preventDefault = True
    }



-- {Page} New


pageNew : Playlist -> Node
pageNew newPlaylist =
    column
        Zed
        [ height fill ]
        [ ------------------------------------
          -- Navigation
          ------------------------------------
          Navigation.insideCustom
            [ ( Icon Icons.arrow_back
              , Label (Hidden "Go back")
                --
              , Index
                    |> Routing.Types.Playlists
                    |> Routing.Types.GoToPage
                    |> RoutingMsg
              )
            ]

        ------------------------------------
        -- Form
        ------------------------------------
        , within
            [ logoBackdrop
            , newPlaylist
                |> form New
                |> takeOver
            ]
            (takeOver empty)
        ]



-- {Page} Edit


pageEdit : Playlist -> Node
pageEdit existingPlaylist =
    column
        Zed
        [ height fill ]
        [ ------------------------------------
          -- Navigation
          ------------------------------------
          Navigation.insideCustom
            [ ( Icon Icons.arrow_back
              , Label (Hidden "Go back")
                --
              , Index
                    |> Routing.Types.Playlists
                    |> Routing.Types.GoToPage
                    |> RoutingMsg
              )
            ]

        ------------------------------------
        -- Form
        ------------------------------------
        , within
            [ logoBackdrop
            , existingPlaylist
                |> form (Edit <| Http.encodeUri existingPlaylist.name)
                |> takeOver
            ]
            (takeOver empty)
        ]



-- Form


form : Page -> Playlist -> Node
form page playlist =
    let
        msg =
            if String.isEmpty playlist.name then
                ShowNotification (Error "Can't have a playlist without a name, can we now?")
            else
                case page of
                    Edit _ ->
                        PlaylistsMsg (UpdatePlaylistName playlist)

                    _ ->
                        PlaylistsMsg CreateFromForm
    in
        column Zed
            [ center
            , height fill
            , onEnterKey msg
            , spacing (scaled 8)
            , verticalCenter
            , width fill
            ]
            [ h2
                H2
                []
                (text "Name your playlist")

            -- Input
            --
            , Input.text
                (Form Input)
                [ center
                , inputBottomPadding
                , inputTopPadding
                , maxWidth (px 420)
                , width fill
                ]
                { onChange = PlaylistsMsg << SetNewPlaylistName
                , value = playlist.name
                , label =
                    Input.placeholder
                        { text = "The Classics"
                        , label = Input.hiddenLabel "Name"
                        }
                , options = []
                }

            -- Submit button
            --
            , btn
                Button
                [ onClick msg ]
                (case page of
                    Edit _ ->
                        text "Save"

                    _ ->
                        text "Create playlist"
                )
            ]
