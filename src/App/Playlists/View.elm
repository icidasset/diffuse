module Playlists.View exposing (..)

import Color
import Color.Convert
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (onClick, onInput, onWithOptions)
import Html.Keyed
import Html.Lazy exposing (..)
import Json.Decode
import Layouts exposing (centeredForm)
import Material.Icons.Content as Icons
import Material.Icons.File as Icons
import Material.Icons.Navigation as Icons
import Material.Icons.Social as Icons
import Navigation.Types exposing (..)
import Navigation.View as Navigation
import Playlists.Types as Playlists exposing (..)
import Routing.Types
import Tracks.Types
import Types as TopLevel exposing (Msg(..))
import Utils exposing (cssClass, cssClasses)
import Variables exposing (colorDerivatives, colors)


-- Styles

import Form.Styles exposing (Classes(..))
import List.Styles exposing (Classes(..))
import Styles exposing (Classes(..))


-- 🍯


entry : Playlists.Page -> TopLevel.Model -> Html TopLevel.Msg
entry page model =
    case page of
        Index ->
            lazy2
                pageIndex
                model.playlists.collection
                model.tracks.selectedPlaylist

        New ->
            pageNew



-- {Page} index


pageIndex : List Playlist -> Maybe Playlist -> Html TopLevel.Msg
pageIndex playlists maybeSelectedPlaylist =
    div
        [ cssClass InsulationContent ]
        [ ------------------------------------
          -- Navigation
          ------------------------------------
          Navigation.insideCustom
            [ ( Icon Icons.arrow_back
              , Label (Hidden "Go back")
                --
              , Routing.Types.Index
                    |> Routing.Types.GoToPage
                    |> RoutingMsg
              )
            , ( Icon Icons.add
              , Label (Shown "Create a playlist")
                --
              , Playlists.New
                    |> Routing.Types.Playlists
                    |> Routing.Types.GoToPage
                    |> RoutingMsg
              )
            ]

        ------------------------------------
        -- List
        ------------------------------------
        , div
            [ cssClass ContentBox ]
            [ h1
                []
                [ text "Playlists" ]

            -- Lists
            --
            , let
                ( autoGeneratedPlaylists, yourPlaylists ) =
                    playlists
                        |> List.sortBy .name
                        |> List.partition .autoGenerated

                render =
                    renderPlaylist maybeSelectedPlaylist
              in
                div
                    []
                    [ h4
                        []
                        [ Icons.person colorDerivatives.text 16
                        , text "Your playlists"
                        ]
                    , ul
                        [ cssClass ListWithActions ]
                        (List.map render yourPlaylists)
                    , h4
                        []
                        [ Icons.folder colorDerivatives.text 16
                        , text "Autogenerated directory playlists"
                        ]
                    , ul
                        [ cssClass ListWithActions ]
                        (List.map render autoGeneratedPlaylists)
                    ]
            ]
        ]


renderPlaylist : Maybe Playlist -> Playlist -> Html TopLevel.Msg
renderPlaylist maybeSelectedPlaylist playlist =
    let
        isSelected =
            Just playlist == maybeSelectedPlaylist
    in
        li
            [ playlist
                |> Tracks.Types.TogglePlaylist
                |> TopLevel.TracksMsg
                |> onClick
            , style
                [ ( "cursor", "pointer" ) ]
            ]
            [ --
              -- Label
              --
              label
                (if isSelected then
                    [ style [ ( "color", Color.Convert.colorToCssRgb colors.base08 ) ] ]
                 else
                    []
                )
                [ text playlist.name ]

            --
            -- Actions
            --
            , span
                [ cssClass ListActions ]
                [ if isSelected then
                    Icons.check colors.base08 16
                  else if playlist.autoGenerated then
                    text ""
                  else
                    a
                        [ playlist.name
                            |> Remove
                            |> TopLevel.PlaylistsMsg
                            |> Json.Decode.succeed
                            |> onWithOptions "click" removeEventOptions
                        ]
                        [ Icons.remove_circle (Color.grayscale 0.175) 16 ]
                ]
            ]


removeEventOptions : Html.Events.Options
removeEventOptions =
    { stopPropagation = True
    , preventDefault = True
    }



-- {Page} new


pageNew : Html TopLevel.Msg
pageNew =
    div
        [ cssClasses
            [ InsulationContent
            , InsulationFlexContent
            ]
        ]
        [ ------------------------------------
          -- Navigation
          ------------------------------------
          Navigation.insideCustom
            [ ( Icon Icons.arrow_back
              , Label (Hidden "Go back")
                --
              , Index
                    |> Routing.Types.Playlists
                    |> Routing.Types.GoToPage
                    |> RoutingMsg
              )
            ]

        ------------------------------------
        -- Form
        ------------------------------------
        , Html.map
            TopLevel.PlaylistsMsg
            pageNewForm
        ]


pageNewForm : Html Playlists.Msg
pageNewForm =
    centeredForm
        CreateFromForm
        (div
            []
            [ h2
                []
                [ text "Name your playlist" ]
            , div
                [ cssClass InputBox
                , style [ ( "max-width", "420px" ) ]
                ]
                [ input
                    [ type_ "text"
                    , placeholder "The Classics"
                    , onInput SetNewPlaylistName
                    ]
                    []
                ]
            , button
                [ cssClass Button, type_ "submit" ]
                [ text "Create playlist" ]
            ]
        )
