module Playlists.View exposing (..)

import Color
import Color.Convert
import Json.Decode
import Material.Icons.Content as Icons
import Material.Icons.File as Icons
import Material.Icons.Navigation as Icons
import Material.Icons.Social as Icons
import Navigation.Types exposing (..)
import Navigation.View as Navigation
import Playlists.Types as Playlists exposing (..)
import Routing.Types
import Tracks.Types
import Types as TopLevel exposing (Msg(..))


-- Elements

import Element exposing (..)
import Element.Attributes exposing (..)
import Element.Events exposing (onClick, onInput, onWithOptions)
import Element.Ext exposing (..)
import Element.Input as Input
import Element.Types exposing (Node)
import Layouts exposing (btn, inputBottomPadding, inputTopPadding, logoBackdrop, takeOver)
import Variables exposing (colorDerivatives, colors, scaled)
import Variations exposing (Variations(..))


-- Styles

import Form.Styles exposing (Styles(Input))
import List.Styles exposing (Styles(..))
import Styles exposing (Styles(..))


-- 🍯


entry : Playlists.Page -> TopLevel.Model -> Node
entry page model =
    case page of
        Index ->
            lazy2
                pageIndex
                model.playlists.collection
                model.tracks.selectedPlaylist

        New ->
            pageNew



-- {Page} index


pageIndex : List Playlist -> Maybe Playlist -> Node
pageIndex playlists maybeSelectedPlaylist =
    column
        Zed
        []
        [ ------------------------------------
          -- Navigation
          ------------------------------------
          Navigation.insideCustom
            [ ( Icon Icons.arrow_back
              , Label (Hidden "Go back")
                --
              , Routing.Types.Index
                    |> Routing.Types.GoToPage
                    |> RoutingMsg
              )
            , ( Icon Icons.add
              , Label (Shown "Create a playlist")
                --
              , Playlists.New
                    |> Routing.Types.Playlists
                    |> Routing.Types.GoToPage
                    |> RoutingMsg
              )
            ]

        ------------------------------------
        -- List
        ------------------------------------
        , column
            Zed
            [ paddingXY (scaled 4) 0 ]
            [ Layouts.h1 "Playlists"

            -- Lists
            --
            , let
                ( autoGeneratedPlaylists, yourPlaylists ) =
                    playlists
                        |> List.sortBy .name
                        |> List.partition .autoGenerated

                render =
                    renderPlaylist maybeSelectedPlaylist
              in
                column
                    Zed
                    []
                    [ -- Yours
                      --
                      listTitle
                        [ 13
                            |> Icons.person colors.base06
                            |> html
                            |> el WithoutLineHeight []

                        --
                        , text "Your playlists"
                        ]
                    , yourPlaylists
                        |> List.map render
                        |> list

                    -- Computed
                    --
                    , listTitle
                        [ 13
                            |> Icons.folder colors.base06
                            |> html
                            |> el WithoutLineHeight [ moveUp 1 ]

                        --
                        , text "Autogenerated directory playlists"
                        ]
                    , autoGeneratedPlaylists
                        |> List.map render
                        |> list
                    ]
            ]
        ]


list : List Node -> Node
list =
    column
        (List Container)
        []


listTitle : List Node -> Node
listTitle =
    row
        H4
        [ paddingBottom (scaled -6)
        , paddingTop (scaled 6)
        , spacingXY (scaled -5) 0
        , verticalCenter
        ]


renderPlaylist : Maybe Playlist -> Playlist -> Node
renderPlaylist maybeSelectedPlaylist playlist =
    let
        isSelected =
            Just playlist == maybeSelectedPlaylist
    in
        Layouts.listItem
            [ vary Clickable True
            , verticalCenter

            --
            , playlist
                |> Tracks.Types.TogglePlaylist
                |> TopLevel.TracksMsg
                |> onClick
            ]
            [ ------------------------------------
              -- Label
              ------------------------------------
              el
                (if isSelected then
                    Selected
                 else
                    Zed
                )
                [ width fill ]
                (text playlist.name)

            ------------------------------------
            -- Action
            ------------------------------------
            , el
                WithoutLineHeight
                []
                (if isSelected then
                    html (Icons.check colors.base08 16)
                 else if playlist.autoGenerated then
                    empty
                 else
                    el
                        WithoutLineHeight
                        [ playlist.name
                            |> Remove
                            |> TopLevel.PlaylistsMsg
                            |> Json.Decode.succeed
                            |> onWithOptions "click" removeEventOptions
                        ]
                        (16
                            |> Icons.remove_circle (Color.grayscale 0.175)
                            |> html
                        )
                )
            ]


removeEventOptions : Element.Events.Options
removeEventOptions =
    { stopPropagation = True
    , preventDefault = True
    }



-- {Page} new


pageNew : Node
pageNew =
    column
        Zed
        [ height fill ]
        [ ------------------------------------
          -- Navigation
          ------------------------------------
          Navigation.insideCustom
            [ ( Icon Icons.arrow_back
              , Label (Hidden "Go back")
                --
              , Index
                    |> Routing.Types.Playlists
                    |> Routing.Types.GoToPage
                    |> RoutingMsg
              )
            ]

        ------------------------------------
        -- Form
        ------------------------------------
        , within
            [ logoBackdrop, takeOver pageNewForm ]
            (takeOver empty)
        ]


pageNewForm : Node
pageNewForm =
    column Zed
        [ center
        , height fill
        , onEnterKey (PlaylistsMsg CreateFromForm)
        , spacing (scaled 8)
        , verticalCenter
        , width fill
        ]
        [ h2
            H2
            []
            (text "Name your playlist")

        -- Input
        --
        , Input.text
            (Form Input)
            [ center
            , inputBottomPadding
            , inputTopPadding
            , maxWidth (px 420)
            , width fill
            ]
            { onChange = PlaylistsMsg << SetNewPlaylistName
            , value = ""
            , label =
                Input.placeholder
                    { text = "The Classics"
                    , label = Input.hiddenLabel "Name"
                    }
            , options = []
            }

        -- Submit button
        --
        , btn
            Button
            [ onClick (PlaylistsMsg CreateFromForm) ]
            (text "Create playlist")
        ]
