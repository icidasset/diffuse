module Tracks.ContextMenu exposing (..)

import Material.Icons.Action as Icons
import Material.Icons.Editor as Icons
import Mouse
import Playlists.Types exposing (Msg(..))
import Playlists.Utils
import Queue.Types
import Tracks.Types exposing (..)
import Tracks.Utils
import Types exposing (..)
import Variables exposing (colorDerivatives)


trackMenu : Tracks.Types.Model -> Maybe String -> List IdentifiedTrack -> Mouse.Position -> ContextMenu
trackMenu model lastModifiedPlaylist identifiedTracks =
    let
        tracks =
            List.map Tracks.Utils.unindentify identifiedTracks
    in
        [ queueActions identifiedTracks

        --
        --
        , case model.selectedPlaylist of
            Just selectedPlaylist ->
                if selectedPlaylist.autoGenerated then
                    -- Playlist actions, default.
                    defaultPlaylistActions tracks lastModifiedPlaylist
                else
                    -- Playlist actions, when in a playlist.
                    [ ( Icons.format_list_numbered colorDerivatives.text 14
                      , "Remove from playlist"
                      , identifiedTracks
                            |> List.map (Tuple.first >> .indexInPlaylist >> Maybe.withDefault 0)
                            |> RemoveTracksByIndex selectedPlaylist.name
                            |> PlaylistsMsg
                      )
                    , ( Icons.format_list_numbered colorDerivatives.text 14
                      , "Add to another playlist"
                      , RequestAssistanceForPlaylists tracks
                      )
                    ]

            Nothing ->
                -- Playlist actions, default.
                defaultPlaylistActions tracks lastModifiedPlaylist
        ]
            |> List.concat
            |> ContextMenu



-- Actions


defaultPlaylistActions : List Track -> Maybe String -> ContextMenuItems
defaultPlaylistActions tracks lastModifiedPlaylist =
    case lastModifiedPlaylist of
        Just playlistName ->
            [ ( Icons.format_list_numbered colorDerivatives.text 14
              , "Add to \"" ++ playlistName ++ "\""
              , tracks
                    |> List.map Playlists.Utils.playlistTrackFromTrack
                    |> AddToPlaylist playlistName
                    |> PlaylistsMsg
              )
            , ( Icons.format_list_numbered colorDerivatives.text 14
              , "Add to another playlist"
              , RequestAssistanceForPlaylists tracks
              )
            ]

        Nothing ->
            [ ( Icons.format_list_numbered colorDerivatives.text 14
              , "Add to playlist"
              , RequestAssistanceForPlaylists tracks
              )
            ]


queueActions : List IdentifiedTrack -> ContextMenuItems
queueActions identifiedTracks =
    case identifiedTracks of
        [ a ] ->
            [ ( Icons.event_seat colorDerivatives.text 14
              , "Play next"
              , QueueMsg (Queue.Types.InjectFirst a { showNotification = True })
              )
            , ( Icons.event_seat colorDerivatives.text 14
              , "Add to queue"
              , QueueMsg (Queue.Types.InjectLast [ a ] { showNotification = True })
              )
            ]

        list ->
            [ ( Icons.event_seat colorDerivatives.text 14
              , "Add to queue"
              , QueueMsg (Queue.Types.InjectLast list { showNotification = True })
              )
            ]
